{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"naivebayesafterfeaturereduction","provenance":[],"authorship_tag":"ABX9TyPTcoTRkFMEAviaElZg7yvS"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-eB0M3cCOOPQ","executionInfo":{"status":"ok","timestamp":1607027989956,"user_tz":-360,"elapsed":1136,"user":{"displayName":"Maloy Kumar Devnath","photoUrl":"","userId":"08683219606020583205"}},"outputId":"3373be4b-38da-4530-ab67-7f3e140d396c"},"source":["import seaborn as sn\n","import matplotlib.pyplot as plt\n","import pandas\n","import numpy as np\n","\n","\n","# load dataset\n","dataframe = pandas.read_table('/content/complete_gdata_GraphFeatures.txt')\n","\n","data = dataframe.drop(\"No.\", axis=1)\n","# data = data.drop(\"Nodes\", axis = 1)\n","# data = data.drop(\"Edges\", axis = 1)\n","# data = data.drop(\"Minimum Indegree\", axis=1)\n","# #data = data.drop(\"Median PageRank\", axis = 1)\n","# data = data.drop(\"Minimum Outdegree\", axis=1)\n","\n","\n","\n","\n","X = dataframe.values\n","\n","# split into input (X) and output (Y) variables\n","\n","#l = 18565+18328+659+23108+19194\n","l = 37765\n","\n","#X = data[0:l,1:]\n","# Y = dataset[100:200, 1:10]\n","# print(X)\n","# print(X.shape)\n","labels = []\n","for i in range (0,l):\n","  if X[i][12] == True:  #for new dataset it neeeds to be True bool\n","    labels.append(0)\n","  else:\n","    labels.append(1)\n","\n","print(labels.count(0))\n","print(labels.count(1))\n","\n","features = data.iloc[0:,0:9]\n","\n","print(features)\n","\n","for col in features.columns:\n","  print(col)\n","\n","# print(features)\n","\n","# df = dataframe.corr()\n","\n","# #print(df)\n","\n","# corrMatrix = data.corr()\n","# print(corrMatrix)\n","\n","# sn.heatmap(corrMatrix, annot=True, fmt = \".1g\")\n","# plt.show()\n","# may be needed\n","# inList1 = []\n","# outList1 = []\n","\n","# inList0 =[]\n","# outList0 = []\n","\n","# inList = dataframe['Maximum Indegree']\n","# outList = dataframe['Maximum Outdegree']\n","\n","\n","# for i in range(0,len(labels)):\n","#   if labels[i] == 1:\n","#     inList1.append(inList[i])\n","#     outList1.append(outList[i])\n","#   else:\n","#     inList0.append(inList[i])\n","#     outList0.append(outList[i])\n","\n","    \n","\n","\n","\n","\n","\n"],"execution_count":8,"outputs":[{"output_type":"stream","text":["34202\n","3563\n","       Nodes  Edges  ...  Maximum PageRank  Mininum PageRank\n","0         57    121  ...          0.062854          0.005226\n","1         54    113  ...          0.071518          0.006019\n","2         59    120  ...          0.058556          0.005264\n","3         75    128  ...          0.057930          0.002090\n","4         54    110  ...          0.070686          0.005689\n","...      ...    ...  ...               ...               ...\n","37760     55    100  ...          0.060774          0.006861\n","37761     63    106  ...          0.061599          0.002485\n","37762     52    104  ...          0.063804          0.005547\n","37763     63    108  ...          0.049033          0.004521\n","37764     55     97  ...          0.071045          0.004724\n","\n","[37765 rows x 9 columns]\n","Nodes\n","Edges\n","Maximum Indegree\n","Minimum Indegree\n","Maximum Outdegree\n","Minimum Outdegree\n","Median PageRank\n","Maximum PageRank\n","Mininum PageRank\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MG9mrOwlboQc","executionInfo":{"status":"ok","timestamp":1606677307729,"user_tz":-360,"elapsed":1516,"user":{"displayName":"Maloy Kumar Devnath","photoUrl":"","userId":"08683219606020583205"}},"outputId":"bce0c9c5-d572-45f2-e7c9-4e8a08000f3c"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn import naive_bayes as nb\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","import time\n","\n","\n","train, test, train_labels, test_labels = train_test_split(features,\n","                                                          labels,\n","                                                          test_size=0.33,\n","                                                          random_state=42)\n","\n","# Initialize our classifier\n","gnb = nb.GaussianNB()\n","# Train our classifier\n","modelg = gnb.fit(train, train_labels)\n","predsg = gnb.predict(test)\n","print(\"GNB\")\n","print(accuracy_score(test_labels, predsg))\n","\n","\n","train, test, train_labels, test_labels = train_test_split(features,\n","                                                          labels,\n","                                                          test_size=0.33,\n","                                                          random_state=42)\n","\n","mnb = nb.MultinomialNB()\n","# Train our classifier\n","modelm = mnb.fit(train, train_labels)\n","predsm = mnb.predict(test)\n","print(\"MNB\")\n","print(accuracy_score(test_labels, predsm))\n","\n","\n","train, test, train_labels, test_labels = train_test_split(features,\n","                                                          labels,\n","                                                          test_size=0.33,\n","                                                          random_state=42)\n","\n","cnb = nb.ComplementNB()\n","# Train our classifier\n","modelc = cnb.fit(train, train_labels)\n","predsc = cnb.predict(test)\n","print(\"CNB\")\n","print(accuracy_score(test_labels, predsc))\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["GNB\n","0.9090106715879002\n","MNB\n","0.9090106715879002\n","CNB\n","0.9079675840487844\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"978dsGpnUYlU"},"source":["9 features\n","GNB\n","0.9090106715879002\n","MNB\n","0.9090106715879002\n","CNB\n","0.9079675840487844\n","\n","\n","4 features\n","GNB\n","0.9086897215758646\n","MNB\n","0.9090106715879002\n","CNB\n","0.9090106715879002"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8CVtE08zOpdJ","executionInfo":{"status":"ok","timestamp":1607028007059,"user_tz":-360,"elapsed":4201,"user":{"displayName":"Maloy Kumar Devnath","photoUrl":"","userId":"08683219606020583205"}},"outputId":"d360761d-fa66-49e1-b163-c37dc22551d8"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn import naive_bayes as nb\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","import time\n","# Split our data\n","\n","\n","def timeanalysis1(check):\n","  trainTime = []\n","  testTime = []\n","  train, test, train_labels, test_labels = train_test_split(features,\n","                                                          labels,\n","                                                          test_size=0.33,\n","                                                          random_state=42)\n","\n","# Initialize our classifier\n","  if check == 'gnb':\n","    gnb = nb.GaussianNB()\n","  if check == 'mnb':\n","    gnb = nb.MultinomialNB()\n","  if check == \"cnb\":\n","    gnb = nb.ComplementNB()\n","\n","# Train our classifier\n","  for i in range(0,100):\n","    time1 = time.time()\n","    model = gnb.fit(train, train_labels)\n","    time2 = time.time()\n","\n","    preds = gnb.predict(test)\n","    time3 = time.time()\n","\n","    trainTime.append(time2- time1)\n","    testTime.append(time3-time2)\n","  \n","  variable = \"Train \"+str(np.mean(trainTime))+ \" ----> \" +\"Tst \"+str(np.mean(testTime))\n","  print(check)\n","  print(variable)\n","\n","\n","  #print(preds)\n","\n","# Evaluate accuracy\n","  #print(accuracy_score(test_labels, preds))\n","\n","timeanalysis1('gnb')\n","timeanalysis1('mnb')\n","timeanalysis1('cnb')\n"],"execution_count":9,"outputs":[{"output_type":"stream","text":["gnb\n","Train 0.008731491565704345 ----> Tst 0.0025553226470947264\n","mnb\n","Train 0.007607834339141846 ----> Tst 0.0014640355110168456\n","cnb\n","Train 0.007654414176940918 ----> Tst 0.0013930702209472656\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rL1uwQIKQroX","executionInfo":{"status":"ok","timestamp":1606574112835,"user_tz":-360,"elapsed":1241,"user":{"displayName":"Maloy Kumar Devnath","photoUrl":"","userId":"08683219606020583205"}},"outputId":"2b5f861f-5d39-446a-adf5-5393610bdccc"},"source":[""],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.9774590163934426\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"isDfMYW2SWai","executionInfo":{"status":"ok","timestamp":1606574307983,"user_tz":-360,"elapsed":1570,"user":{"displayName":"Maloy Kumar Devnath","photoUrl":"","userId":"08683219606020583205"}},"outputId":"77f76a34-7722-405d-87ee-0ba73c535aef"},"source":["from sklearn.metrics import roc_curve\n","\n","fpr, tpr, thresholds = roc_curve(test_labels, preds)\n","\n","plt.figure(figsize=(6,4))\n","\n","plt.plot(fpr, tpr, linewidth=2)\n","\n","plt.plot([0,1], [0,1], 'k--' )\n","\n","plt.rcParams['font.size'] = 10\n","\n","\n","\n","plt.xlabel('False positive rate')\n","\n","plt.ylabel('True positive rate')\n","\n","plt.savefig('roc_curve_gnb4.pdf', bbox_inches = \"tight\")\n","plt.savefig('roc_curve_gnb4.PNG', bbox_inches = \"tight\")\n","plt.savefig('roc_curve_gnb4.svg', bbox_inches = \"tight\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"QcHJ-Or6QHMH"},"source":["multinomial\n","Train 0.0271197509765625 ----> Tst 0.003413219451904297\n","Train 0.016178030967712403 ----> Tst 0.001978192329406738\n","\n","GaussianNB\n","Train 0.019783635139465332 ----> Tst 0.004903471469879151\n","Train 0.015116186141967773 ----> Tst 0.003065662384033203\n","\n","Complemebt\n","Train 0.026633334159851075 ----> Tst 0.0029272055625915528\n","Train 0.01635850191116333 ----> Tst 0.0018344712257385254"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FYngb-fRNkgj"},"source":["Nodes = np.var(list(dataframe['Nodes'])) \n","Edges = np.var(list(dataframe['Edges']))\n","MaxInd = np.var(list(dataframe['Maximum Indegree']))\n","MaxOut = np.var(list(dataframe['Maximum Outdegree']))\n","MinIn = np.var(list(dataframe['Minimum Indegree']))\n","MinOut = np.var(list(dataframe['Minimum Outdegree']))\n","MePage = np.var(list(dataframe['Median PageRank']))\n","MaxPage = np.var(list(dataframe['Maximum PageRank']))\n","MinPage = np.var(list(dataframe['Mininum PageRank']))\n","\n","print(\"Nodes\")\n","print(Nodes)\n","print(\"Edges\")\n","print(Edges)\n","print(\"MaxInd\")\n","print(MaxInd)\n","print(\"Maxout\")\n","print(MaxOut)\n","print(\"MinIn\")\n","print(MinIn)\n","print(\"MinOut\")\n","print(MinOut)\n","print(\"MePage\")\n","print(MePage)\n","print(\"MaxPage\")\n","print(MaxPage)\n","print(\"MinPage\")\n","print(MinPage)\n"],"execution_count":null,"outputs":[]}]}